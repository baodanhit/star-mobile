var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};

// index.ts
var require_env = __commonJS((exports, module) => {
  module.exports = env_default;
});

// src/env.ts
import has from "lodash.has";
import trim from "lodash.trim";
import dotenv from "dotenv";
var envPath = process.env.ENV_PATH || "local.env";
dotenv.config({path: envPath});
var utils = {
  string(key, defaultValue) {
    return has(process.env, key) ? process.env[key] : defaultValue;
  },
  int(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseInt(value, 10);
  },
  float(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseFloat(value);
  },
  bool(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key];
    return value === "true";
  },
  json(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    try {
      return JSON.parse(value);
    } catch (error) {
      throw new Error(`Invalid json environment variable ${key}: ${error.message}`);
    }
  },
  array(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    let value = process.env[key] || "";
    if (value.startsWith("[") && value.endsWith("]")) {
      value = value.substring(1, value.length - 1);
    }
    return value.split(",").map((v) => {
      return trim(trim(v, " "), '"');
    });
  },
  date(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return new Date(value);
  }
};
function env(key, defaultValue) {
  return has(process.env, key) ? process.env[key] : defaultValue;
}
var env_default = Object.assign(env, utils);
export default require_env();
