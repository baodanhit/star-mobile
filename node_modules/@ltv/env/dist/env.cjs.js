var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/env.ts
var import_lodash = __toModule(require("lodash.has"));
var import_lodash2 = __toModule(require("lodash.trim"));
var import_dotenv = __toModule(require("dotenv"));
var envPath = process.env.ENV_PATH || "local.env";
import_dotenv.default.config({path: envPath});
var utils = {
  string(key, defaultValue) {
    return (0, import_lodash.default)(process.env, key) ? process.env[key] : defaultValue;
  },
  int(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseInt(value, 10);
  },
  float(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseFloat(value);
  },
  bool(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key];
    return value === "true";
  },
  json(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    try {
      return JSON.parse(value);
    } catch (error) {
      throw new Error(`Invalid json environment variable ${key}: ${error.message}`);
    }
  },
  array(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    let value = process.env[key] || "";
    if (value.startsWith("[") && value.endsWith("]")) {
      value = value.substring(1, value.length - 1);
    }
    return value.split(",").map((v) => {
      return (0, import_lodash2.default)((0, import_lodash2.default)(v, " "), '"');
    });
  },
  date(key, defaultValue) {
    if (!(0, import_lodash.default)(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return new Date(value);
  }
};
function env(key, defaultValue) {
  return (0, import_lodash.default)(process.env, key) ? process.env[key] : defaultValue;
}
var env_default = Object.assign(env, utils);

// index.ts
module.exports = env_default;
